generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model User {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?    @unique
    emailVerified  DateTime?
    role           String?
    hashedPassword String?
    image          String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    accounts       Account[]
    sessions       Session[]
    Cart           Cart[]
    Wishlist       Wishlist[]
    Delivery       Delivery[]
    Order          Order[]

    @@map("users")
}

model Product {
    id            String           @id @default(auto()) @map("_id") @db.ObjectId
    description   String
    imageUrl      String
    name          String
    price         Int
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    CartItems     CartItems[]
    categoryId    String?          @db.ObjectId
    category      Category?        @relation(fields: [categoryId], references: [id])
    variants      ProductVariant[]
    WishlistItems WishlistItems[]
    color         Color?           @relation(fields: [colorsId], references: [id])
    colorsId      String?          @db.ObjectId

    @@map("products")
}

model ProductVariant {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    color         String?
    price         Int?
    imageUrl      String?
    productId     String?         @db.ObjectId
    product       Product?        @relation(fields: [productId], references: [id])
    CartItems     CartItems[]
    WishlistItems WishlistItems[]

    @@map("products_variants")
}

model Category {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String?
    products Product[]

    @@map("categories")
}

model Color {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String?
    products Product[]

    @@map("colors")
}

model Cart {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    userId     String?      @db.ObjectId
    cartItems  CartItems[]
    OrderItems OrderItems[]
    isPaid     Boolean

    @@map("carts")
}

model CartItems {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    variantId String?         @db.ObjectId
    variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
    productId String          @db.ObjectId
    product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    cartId    String          @db.ObjectId
    cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    @@map("carts_items")
}

model Wishlist {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    userId        String?         @db.ObjectId
    wishlistItems WishlistItems[]
    user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt

    @@map("wishlists")
}

model WishlistItems {
    id         String          @id @default(auto()) @map("_id") @db.ObjectId
    variantId  String?         @db.ObjectId
    variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
    productId  String          @db.ObjectId
    product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    wishlistId String          @db.ObjectId
    wishlist   Wishlist        @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt

    @@map("wishlist_items")
}

model Delivery {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    userId        String?         @db.ObjectId
    user          User?           @relation(fields: [userId], references: [id])
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deliveryItems DeliveryItems[]

    @@map("deliveries")
}

model DeliveryItems {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    deliveryId       String          @db.ObjectId
    delivery         Delivery        @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deliveryOptionId String?         @db.ObjectId
    deliveryOption   DeliveryOption? @relation(fields: [deliveryOptionId], references: [id], onDelete: Cascade)
    Default          Boolean         @default(true)
    SoftDelete       Boolean         @default(false)
    name             String
    surname          String
    email            String
    tel              String
    address          String
    postcode         String
    country          String
    city             String
    orderItems       OrderItems[]

    @@map("deliveries_items")
}

model DeliveryOption {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    DeliveryItems DeliveryItems[]

    @@map("delivery_options")
}

model Order {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    userId     String?      @db.ObjectId
    user       User?        @relation(fields: [userId], references: [id])
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    orderItems OrderItems[]

    @@map("orders")
}

model OrderItems {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    orderId         String?        @db.ObjectId
    order           Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
    cartId          String         @db.ObjectId
    cart            Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
    isPaid          Boolean
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    deliveryItems   DeliveryItems? @relation(fields: [deliveryItemsId], references: [id])
    deliveryItemsId String?        @db.ObjectId

    @@map("orders_items")
}
