generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    userId             String    @db.ObjectId
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    userId       String   @db.ObjectId
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    hashedPassword String?
    image          String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    accounts       Account[]
    sessions       Session[]
    Cart           Cart[]
}

model VerificationRequest {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model Products {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    description String
    imageUrl    String
    name        String
    price       Int
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    CartItems   CartItems[]
    categoryId  String?     @db.ObjectId
    category    Category?   @relation(fields: [categoryId], references: [id])

    @@map("products")
}

model Category {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    products Products[]
}

model Cart {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    cartItems CartItems[]
    UserId    String?     @db.ObjectId
    user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    userId    String?     @db.ObjectId

    @@map("carts")
}

model CartItems {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    cartId    String   @db.ObjectId
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

    @@map("cartitems")
}
