generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    role           String?
    hashedPassword String?
    image          String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    accounts       Account[]
    sessions       Session[]
    Cart           Cart[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Products {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    description String
    imageUrl    String
    name        String
    price       Int
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    CartItems   CartItems[]
    categoryId  String?     @db.ObjectId
    category    Category?   @relation(fields: [categoryId], references: [id])

    @@map("products")
}

model Category {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    products Products[]

    @@map("categories")
}

model Cart {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    cartItems CartItems[]
    UserId    String?     @db.ObjectId
    user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    userId    String?     @db.ObjectId

    @@map("carts")
}

model CartItems {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String   @db.ObjectId
    product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    cartId    String   @db.ObjectId
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

    @@map("cartitems")
}
