generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "mongodb"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?    @unique
    emailVerified  DateTime?
    role           UserRole   @default(USER)
    hashedPassword String?
    newsletter     Boolean?
    image          String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    accounts       Account[]
    sessions       Session[]
    Cart           Cart[]
    Wishlist       Wishlist[]
    Delivery       Delivery[]
    Order          Order[]
    deleteAt       DateTime?

    @@map("users")
}

enum Color {
    or
    argent
    rose
}

enum Category {
    bracelet_cuir
    bracelet_acier
}

model Product {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    description   String
    imageUrl      String?
    name          String
    status        String
    priority      String[]
    price         Int
    stock         Int
    deleteAt      DateTime?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    CartItems     CartItems[]
    WishlistItems WishlistItems[]
    color         Color?
    category      Category?

    @@map("products")
}

model Cart {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    userId     String?      @db.ObjectId
    cartItems  CartItems[]
    OrderItems OrderItems[]
    deleteAt   DateTime?

    @@map("carts")
}

model CartItems {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    productId String    @db.ObjectId
    product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    cartId    String    @db.ObjectId
    cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    deleteAt  DateTime?

    @@map("carts_items")
}

model Wishlist {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    userId        String?         @db.ObjectId
    wishlistItems WishlistItems[]
    user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deleteAt      DateTime?

    @@map("wishlists")
}

model WishlistItems {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    productId  String    @db.ObjectId
    product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    wishlistId String    @db.ObjectId
    wishlist   Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deleteAt   DateTime?

    @@map("wishlist_items")
}

model Delivery {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    userId        String          @db.ObjectId
    user          User            @relation(fields: [userId], references: [id])
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deleteAt      DateTime?
    deliveryItems DeliveryItems[]

    @@map("deliveries")
}

model DeliveryItems {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    deliveryId String       @db.ObjectId
    delivery   Delivery     @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    Default    Boolean      @default(true)
    deleteAt   DateTime?
    name       String
    surname    String
    email      String
    tel        String
    address    String
    postcode   String
    country    String
    city       String
    orderItems OrderItems[]

    @@map("deliveries_items")
}

model DeliveryOption {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    price       Int
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    deleteAt    DateTime?
    OrderItems  OrderItems[]

    @@map("delivery_options")
}

model Order {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    userId     String       @db.ObjectId
    user       User         @relation(fields: [userId], references: [id])
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    orderItems OrderItems[]
    deleteAt   DateTime?

    @@map("orders")
}

model OrderItems {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    orderNumber      String
    orderId          String          @db.ObjectId
    order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    cartId           String          @db.ObjectId
    cart             Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
    status           String
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deliveryItems    DeliveryItems   @relation(fields: [deliveryItemsId], references: [id])
    deliveryItemsId  String          @db.ObjectId
    deliveryOptionId String?         @db.ObjectId
    deliveryOption   DeliveryOption? @relation(fields: [deliveryOptionId], references: [id], onDelete: Cascade)
    deleteAt         DateTime?

    @@map("orders_items")
}

model UserLocation {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    latitude  Float
    longitude Float
    platform  String
    userAgent String
    createdAt DateTime  @default(now())
    deleteAt  DateTime?

    @@map("user_location")
}

model DetailedVisit {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    url       String
    timestamp DateTime @default(now())

    @@map("detailed_visit")
}

model AggregatedVisit {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    url       String    @unique
    count     Int       @default(0)
    lastCount DateTime  @default(now())
    createdAt DateTime  @default(now())
    deleteAt  DateTime?

    @@map("aggregated_visit")
}

model VisitorInfo {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    visitorId  String    @unique
    browser    Browser
    os         String
    city       String?
    country    String?
    region     String?
    deviceType Device
    createdAt  DateTime  @default(now())
    deleteAt   DateTime?

    @@map("visitor_info")
}

enum Device {
    desktop
    mobile
}

enum Browser {
    Chrome
    Edge
    Safari
    Opera
    Firefox
    IE
    Other
}
