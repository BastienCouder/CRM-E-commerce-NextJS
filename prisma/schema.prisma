generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model User {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?    @unique
    emailVerified  DateTime?
    role           String?
    hashedPassword String?
    image          String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    accounts       Account[]
    sessions       Session[]
    Cart           Cart[]
    Wishlist       Wishlist[]
    likedProducts  Like[]     @relation("LikesByUser")
    Like           Like[]

    @@map("users")
}

model Product {
    id            String           @id @default(auto()) @map("_id") @db.ObjectId
    description   String
    imageUrl      String
    name          String
    price         Int
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    CartItems     CartItems[]
    categoryId    String?          @db.ObjectId
    category      Category?        @relation(fields: [categoryId], references: [id])
    variants      ProductVariant[]
    WishlistItems WishlistItems[]
    likedByUsers  Like[]           @relation("LikesProduct")
    Like          Like[]

    @@map("products")
}

model ProductVariant {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    color         String?
    price         Int?
    imageUrl      String?
    productId     String?         @db.ObjectId
    product       Product?        @relation(fields: [productId], references: [id])
    CartItems     CartItems[]
    WishlistItems WishlistItems[]

    @@map("productvariants")
}

model Category {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    products Product[]

    @@map("categories")
}

model Like {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    likedByUser    User     @relation("LikesByUser", fields: [likedById], references: [id])
    likedById      String   @db.ObjectId
    likedProduct   Product  @relation("LikesProduct", fields: [likedProductId], references: [id])
    likedProductId String   @db.ObjectId
    createdAt      DateTime @default(now())
    User           User?    @relation(fields: [userId], references: [id])
    userId         String?  @db.ObjectId
    Product        Product? @relation(fields: [productId], references: [id])
    productId      String?  @db.ObjectId

    @@map("likes")
}

model Cart {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    cartItems CartItems[]
    UserId    String?     @db.ObjectId
    user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    userId    String?     @db.ObjectId

    @@map("carts")
}

model CartItems {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    variantId String?         @db.ObjectId()
    variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
    productId String          @db.ObjectId
    product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    cartId    String          @db.ObjectId
    cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)

    @@map("cartitems")
}

model Wishlist {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    wishlistItems WishlistItems[]
    UserId        String?         @db.ObjectId
    user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    userId        String?         @db.ObjectId

    @@map("wishlists")
}

model WishlistItems {
    id         String          @id @default(auto()) @map("_id") @db.ObjectId
    variantId  String?         @db.ObjectId
    variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
    productId  String          @db.ObjectId
    product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity   Int
    wishlistId String          @db.ObjectId
    wishlist   Wishlist        @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

    @@map("wishlistitems")
}
