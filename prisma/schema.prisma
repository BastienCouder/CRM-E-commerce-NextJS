generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

enum UserRole {
    ADMIN
    USER
    PRODUCT_MANAGER
    CUSTOMER_SERVICE
    MARKETING_MANAGER
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?
    role                  UserRole               @default(USER)
    password              String?
    newsletter            Boolean?
    image                 String?
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?

    Cart     Cart[]
    Wishlist Wishlist[]
    Delivery Delivery[]
    Order    Order[]
    deleteAt DateTime?
    Session  Session[]
}

enum Color {
    or
    argent
    rose
}

enum Category {
    bracelet_cuir
    bracelet_acier
}

model Product {
    id            String          @id @default(cuid())
    description   String
    imageUrl      String?
    name          String
    status        String
    priority      String[]
    price         Int
    stock         Int
    deleteAt      DateTime?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    CartItems     CartItems[]
    WishlistItems WishlistItems[]
    color         Color?
    category      Category?
}

model Cart {
    id         String       @id @default(cuid())
    user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    userId     String?
    cartItems  CartItems[]
    OrderItems OrderItems[]
    deleteAt   DateTime?
}

model CartItems {
    id        String    @id @default(cuid())
    productId String
    product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int
    cartId    String
    cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    deleteAt  DateTime?
}

model Wishlist {
    id            String          @id @default(cuid())
    userId        String?
    wishlistItems WishlistItems[]
    user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deleteAt      DateTime?
}

model WishlistItems {
    id         String    @id @default(cuid())
    productId  String
    product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
    wishlistId String
    wishlist   Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deleteAt   DateTime?
}

model Delivery {
    id            String          @id @default(cuid())
    userId        String
    user          User            @relation(fields: [userId], references: [id])
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    deleteAt      DateTime?
    deliveryItems DeliveryItems[]
}

model DeliveryItems {
    id         String       @id @default(cuid())
    deliveryId String
    delivery   Delivery     @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    Default    Boolean      @default(true)
    deleteAt   DateTime?
    name       String
    surname    String
    email      String
    tel        String
    address    String
    postcode   String
    country    String
    city       String
    orderItems OrderItems[]
}

model DeliveryOption {
    id          String       @id @default(cuid())
    name        String
    description String
    price       Int
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    deleteAt    DateTime?
    OrderItems  OrderItems[]
}

model Order {
    id         String       @id @default(cuid())
    userId     String
    user       User         @relation(fields: [userId], references: [id])
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    orderItems OrderItems[]
    deleteAt   DateTime?
}

model OrderItems {
    id               String          @id @default(cuid())
    orderNumber      String
    orderId          String
    order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    cartId           String
    cart             Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
    status           String
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    deliveryItems    DeliveryItems   @relation(fields: [deliveryItemsId], references: [id])
    deliveryItemsId  String
    deliveryOptionId String?
    deliveryOption   DeliveryOption? @relation(fields: [deliveryOptionId], references: [id], onDelete: Cascade)
    deleteAt         DateTime?
}

model UserLocation {
    id        String    @id @default(cuid())
    latitude  Float
    longitude Float
    platform  String
    userAgent String
    createdAt DateTime  @default(now())
    deleteAt  DateTime?
}

model DetailedVisit {
    id        String   @id @default(cuid())
    url       String
    timestamp DateTime @default(now())
}

model AggregatedVisit {
    id        String    @id @default(cuid())
    url       String    @unique
    count     Int       @default(0)
    lastCount DateTime  @default(now())
    createdAt DateTime  @default(now())
    deleteAt  DateTime?
}

model VisitorInfo {
    id         String    @id @default(cuid())
    visitorId  String    @unique
    browser    Browser
    os         String
    city       String?
    country    String?
    region     String?
    deviceType Device
    createdAt  DateTime  @default(now())
    deleteAt   DateTime?
}

enum Device {
    desktop
    mobile
}

enum Browser {
    Chrome
    Edge
    Safari
    Opera
    Firefox
    IE
    Other
}

model Mail {
    id      String   @id @default(cuid())
    name    String?
    email   String
    subject String
    text    String
    date    DateTime
    read    Boolean
    labels  String[]
}

model AccountMail {
    id    String @id @default(cuid())
    label String
    email String @unique
}

model Contact {
    id    String @id @default(cuid())
    name  String
    email String @unique
}
